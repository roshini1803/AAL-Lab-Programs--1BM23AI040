#include <stdio.h>
#include <limits.h>

#define MAX 10
#define INF 99999

int tsp(int graph[MAX][MAX], int visited[MAX], int pos, int n, int count, int cost, int start, int *minCost) {
    if (count == n && graph[pos][start]) {
        int totalCost = cost + graph[pos][start];
        if (totalCost < *minCost)
            *minCost = totalCost;
        return *minCost;
    }

    for (int i = 0; i < n; i++) {
        if (!visited[i] && graph[pos][i]) {
            visited[i] = 1;
            tsp(graph, visited, i, n, count + 1, cost + graph[pos][i], start, minCost);
            visited[i] = 0;
        }
    }
    return *minCost;
}

int main() {
    int n;
    int graph[MAX][MAX];
    int visited[MAX] = {0};
    int minCost = INF;

    printf("Enter number of cities: ");
    scanf("%d", &n);

    printf("Enter the cost adjacency matrix (use %d for no path):\n", INF);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);

    visited[0] = 1;

    int result = tsp(graph, visited, 0, n, 1, 0, 0, &minCost);

    printf("Minimum cost to visit all cities: %d\n", result);

    return 0;
}

Output:
Enter number of cities: 4
Enter the cost adjacency matrix (use 99999 for no path):
3
4
5
6
7
9
12
45
65
19
34
68
23
27
64
54
Minimum cost to visit all cities: 92


=== Code Execution Successful ===
