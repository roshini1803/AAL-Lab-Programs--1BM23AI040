#include <stdio.h>
#include <stdlib.h>

#define V 10

struct Edge {
    int src, dest, weight;
};

struct subset {
    int parent, rank;
};

int find(struct subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

void Union(struct subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

int compare(const void *a, const void *b) {
    return ((struct Edge *)a)->weight - ((struct Edge *)b)->weight;
}

void KruskalMST(struct Edge edge[], int n, int e) {
    struct subset subsets[V];
    struct Edge result[V];
    int i, j = 0, k = 0;

    for (i = 0; i < n; i++) {
        subsets[i].parent = i;
        subsets[i].rank = 0;
    }

    qsort(edge, e, sizeof(edge[0]), compare);

    while (j < n - 1 && k < e) {
        struct Edge next_edge = edge[k++];

        int x = find(subsets, next_edge.src);
        int y = find(subsets, next_edge.dest);

        if (x != y) {
            result[j++] = next_edge;
            Union(subsets, x, y);
        }
    }

    printf("Edge \tWeight\n");
    for (i = 0; i < j; i++)
        printf("%d - %d \t%d\n", result[i].src, result[i].dest, result[i].weight);
}

int main() {
    int n, e;
    struct Edge edge[V*V];

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter number of edges: ");
    scanf("%d", &e);

    printf("Enter edges in format (src dest weight):\n");
    for (int i = 0; i < e; i++)
        scanf("%d %d %d", &edge[i].src, &edge[i].dest, &edge[i].weight);

    KruskalMST(edge, n, e);

    return 0;
}

Output:
Enter number of vertices: 4
Enter number of edges: 5
Enter edges in format (src dest weight):
0 1 10
0 2 6
0 3 5
1 3 15
2 3 4
Edge 	Weight
2 - 3 	4
0 - 3 	5
0 - 1 	10
